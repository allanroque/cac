---
- name: Coletar informações de CPU e Memória
  hosts: windows
  gather_facts: true  # Coletar informações do sistema

  tasks:

######################################
#### Informacao de cpu e memoria #####
######################################
    - name: Obter informações de CPU e Memória
      win_shell: |
        $cpuInfo = Get-WmiObject -Class Win32_Processor | Measure-Object -Property NumberOfLogicalProcessors -Sum | Select-Object -ExpandProperty Sum
        $memoryInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty TotalPhysicalMemory
        Write-Host "CPU Count: $cpuInfo"
        Write-Host "Total Memory (Bytes): $memoryInfo"
      register: system_info

    - name: Armazenar informações em variáveis
      set_fact:
        cpu_count: "{{ system_info.stdout_lines[0] | regex_replace('(CPU Count: )', '') }}"
        total_memory_bytes: "{{ system_info.stdout_lines[1] | regex_replace('(Total Memory \\(Bytes\\): )', '') }}"

    - name: Exibir informações coletadas CPU
      debug:
        var: cpu_count

    - name: Exibir informações coletadas Mem
      debug:
        var: total_memory_bytes


    - name: Exibir informações coletadas CPU
      debug:
        msg: "CONSUMO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

##############################################
#### Informacao consumo de cpu e memoria #####
##############################################
    - name: Obter informações de CPU e Memória
      win_shell: |
        $cpuUsage = Get-Counter -Counter '\Processor(_Total)\% Processor Time' -SampleInterval 1 -MaxSamples 1 | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
        $memoryInfo = Get-CimInstance -ClassName Win32_OperatingSystem
        $memoryUsed = $memoryInfo.TotalVisibleMemorySize - $memoryInfo.FreePhysicalMemory
        $memoryUsage = [math]::Round(($memoryUsed / $memoryInfo.TotalVisibleMemorySize) * 100, 2)

        $info = @{
          cpu_usage_percent = $cpuUsage
          memory_usage_percent = $memoryUsage
        }

        $infoJson = $info | ConvertTo-Json
        Write-Host $infoJson
      register: system_info
      changed_when: false

    - name: Extrair informações de CPU e Memória
      set_fact:
        system_info_json: "{{ system_info.stdout }}"
        cpu_usage_percent: "{{ (system_info.stdout | from_json).cpu_usage_percent }}"
        memory_usage_percent: "{{ (system_info.stdout | from_json).memory_usage_percent }}"

    - name: Exibir informações de CPU
      debug:
        var: cpu_usage_percent

    - name: Exibir informações de Memória
      debug:
        var: memory_usage_percent

##############################################
######## Informacao consumo  memoria #########
##############################################

    - name: Obter informações de memória
      win_shell: |
        $memoryInfo = Get-CimInstance -ClassName Win32_OperatingSystem
        $memoryTotalGB = [math]::Round($memoryInfo.TotalVisibleMemorySize / 1GB, 2)
        $memoryFreeGB = [math]::Round($memoryInfo.FreePhysicalMemory / 1GB, 2)
        $memoryUsedGB = $memoryTotalGB - $memoryFreeGB
        $memoryUsedMB = [math]::Round($memoryUsedGB * 1024, 2)

        Write-Host "Total de Memória: ${memoryTotalGB} GB"
        Write-Host "Memória em Uso: ${memoryUsedGB} GB ou ${memoryUsedMB} MB"
      register: memory_info

    - name: Exibir informações de memória
      debug:
        var: memory_info.stdout_lines

    - name: Listar os 10 processos que mais consomem memória
      win_shell: |
        Get-Process | Sort-Object -Property WS -Descending | Select-Object -First 10 | Format-Table -AutoSize
      register: top_memory_processes

    - name: Exibir os 10 processos que mais consomem memória
      debug:
        var: top_memory_processes.stdout_lines